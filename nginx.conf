events {
    worker_connections 1024;
}

http {
    # Rate Limiting Configuration
    # ============================
    # Define rate limit zones based on client IP address ($binary_remote_addr)
    # Syntax: limit_req_zone $variable zone=name:size rate=rate;
    
    # General rate limit: 10 requests per second per IP
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    
    # Auth endpoints: 5 requests per minute (stricter for login/register)
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
    
    # Order endpoints: 20 requests per minute (moderate for order operations)
    limit_req_zone $binary_remote_addr zone=orders:10m rate=20r/m;
    
    # Product endpoints: 30 requests per second (higher for browsing)
    limit_req_zone $binary_remote_addr zone=products:10m rate=30r/s;
    
    # Set custom status code for rate limit errors
    limit_req_status 429;
    upstream user_service {
        server user-service:8001;
    }

    upstream product_service {
        server product-service:8002;
    }

    upstream order_service {
        server order-service:8003;
    }

    server {
        listen 80;

        # User Service routes with rate limiting
        # =========================================
        
        # Login endpoint - strict rate limit to prevent brute force
        location /auth/login {
            # Rate limit: Allow burst of 5 requests, process 3 immediately, queue the rest
            limit_req zone=auth burst=5 delay=3;
            
            rewrite ^/auth/(.*) /$1 break;
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Content-Type $http_content_type;
        }
        
        # Registration endpoint - very strict limit
        location /auth/register {
            # Rate limit: Allow burst of 2 requests, reject excess immediately (nodelay)
            limit_req zone=auth burst=2 nodelay;
            
            rewrite ^/auth/(.*) /$1 break;
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Content-Type $http_content_type;
        }
        
        # Other auth routes - general rate limit
        location /auth/ {
            # Rate limit: Allow burst of 20 requests, delay excess requests
            limit_req zone=general burst=20 delay=10;
            
            rewrite ^/auth/(.*) /$1 break;
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Content-Type $http_content_type;
        }

        # Product Service routes with rate limiting
        # ==========================================
        location /products {
            # Rate limit: Higher limit for browsing products
            # burst=50 allows temporary spikes, delay=20 queues excess requests
            limit_req zone=products burst=50 delay=20;
            
            proxy_pass http://product_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        # Order Service routes with rate limiting
        # ========================================
        location /orders {
            # Rate limit: Moderate limit for order operations
            # burst=10 allows some flexibility, delay=5 for smooth handling
            limit_req zone=orders burst=10 delay=5;
            
            proxy_pass http://order_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }
        
        # Custom error response for rate limit exceeded (429)
        error_page 429 @rate_limit_error;
        location @rate_limit_error {
            default_type application/json;
            return 429 '{"error": "Rate limit exceeded", "message": "Too many requests. Please try again later."}';
        }
    }
}